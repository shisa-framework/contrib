// generated by "charlatan -output=./provider_charlatan.go Provider".  DO NOT EDIT.

package env

import "github.com/ansel1/merry"

import "reflect"

// ProviderGetInvocation represents a single call of FakeProvider.Get
type ProviderGetInvocation struct {
	Parameters struct {
		Ident1 string
	}
	Results struct {
		Ident2 string
		Ident3 merry.Error
	}
}

// NewProviderGetInvocation creates a new instance of ProviderGetInvocation
func NewProviderGetInvocation(ident1 string, ident2 string, ident3 merry.Error) *ProviderGetInvocation {
	invocation := new(ProviderGetInvocation)

	invocation.Parameters.Ident1 = ident1

	invocation.Results.Ident2 = ident2
	invocation.Results.Ident3 = ident3

	return invocation
}

// ProviderGetIntInvocation represents a single call of FakeProvider.GetInt
type ProviderGetIntInvocation struct {
	Parameters struct {
		Ident1 string
	}
	Results struct {
		Ident2 int
		Ident3 merry.Error
	}
}

// NewProviderGetIntInvocation creates a new instance of ProviderGetIntInvocation
func NewProviderGetIntInvocation(ident1 string, ident2 int, ident3 merry.Error) *ProviderGetIntInvocation {
	invocation := new(ProviderGetIntInvocation)

	invocation.Parameters.Ident1 = ident1

	invocation.Results.Ident2 = ident2
	invocation.Results.Ident3 = ident3

	return invocation
}

// ProviderGetBoolInvocation represents a single call of FakeProvider.GetBool
type ProviderGetBoolInvocation struct {
	Parameters struct {
		Ident1 string
	}
	Results struct {
		Ident2 bool
		Ident3 merry.Error
	}
}

// NewProviderGetBoolInvocation creates a new instance of ProviderGetBoolInvocation
func NewProviderGetBoolInvocation(ident1 string, ident2 bool, ident3 merry.Error) *ProviderGetBoolInvocation {
	invocation := new(ProviderGetBoolInvocation)

	invocation.Parameters.Ident1 = ident1

	invocation.Results.Ident2 = ident2
	invocation.Results.Ident3 = ident3

	return invocation
}

// ProviderMonitorInvocation represents a single call of FakeProvider.Monitor
type ProviderMonitorInvocation struct {
	Parameters struct {
		Ident1 string
		Ident2 chan<- Value
	}
}

// ProviderTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type ProviderTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakeProvider is a mock implementation of Provider for testing.
Use it in your tests as in this example:

	package example

	func TestWithProvider(t *testing.T) {
		f := &env.FakeProvider{
			GetHook: func(ident1 string) (ident2 string, ident3 merry.Error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeGet ...
		f.AssertGetCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeGet.
*/
type FakeProvider struct {
	GetHook     func(string) (string, merry.Error)
	GetIntHook  func(string) (int, merry.Error)
	GetBoolHook func(string) (bool, merry.Error)
	MonitorHook func(string, chan<- Value)

	GetCalls     []*ProviderGetInvocation
	GetIntCalls  []*ProviderGetIntInvocation
	GetBoolCalls []*ProviderGetBoolInvocation
	MonitorCalls []*ProviderMonitorInvocation
}

// NewFakeProviderDefaultPanic returns an instance of FakeProvider with all hooks configured to panic
func NewFakeProviderDefaultPanic() *FakeProvider {
	return &FakeProvider{
		GetHook: func(string) (ident2 string, ident3 merry.Error) {
			panic("Unexpected call to Provider.Get")
		},
		GetIntHook: func(string) (ident2 int, ident3 merry.Error) {
			panic("Unexpected call to Provider.GetInt")
		},
		GetBoolHook: func(string) (ident2 bool, ident3 merry.Error) {
			panic("Unexpected call to Provider.GetBool")
		},
		MonitorHook: func(string, chan<- Value) {
			panic("Unexpected call to Provider.Monitor")
		},
	}
}

// NewFakeProviderDefaultFatal returns an instance of FakeProvider with all hooks configured to call t.Fatal
func NewFakeProviderDefaultFatal(t ProviderTestingT) *FakeProvider {
	return &FakeProvider{
		GetHook: func(string) (ident2 string, ident3 merry.Error) {
			t.Fatal("Unexpected call to Provider.Get")
			return
		},
		GetIntHook: func(string) (ident2 int, ident3 merry.Error) {
			t.Fatal("Unexpected call to Provider.GetInt")
			return
		},
		GetBoolHook: func(string) (ident2 bool, ident3 merry.Error) {
			t.Fatal("Unexpected call to Provider.GetBool")
			return
		},
		MonitorHook: func(string, chan<- Value) {
			t.Fatal("Unexpected call to Provider.Monitor")
			return
		},
	}
}

// NewFakeProviderDefaultError returns an instance of FakeProvider with all hooks configured to call t.Error
func NewFakeProviderDefaultError(t ProviderTestingT) *FakeProvider {
	return &FakeProvider{
		GetHook: func(string) (ident2 string, ident3 merry.Error) {
			t.Error("Unexpected call to Provider.Get")
			return
		},
		GetIntHook: func(string) (ident2 int, ident3 merry.Error) {
			t.Error("Unexpected call to Provider.GetInt")
			return
		},
		GetBoolHook: func(string) (ident2 bool, ident3 merry.Error) {
			t.Error("Unexpected call to Provider.GetBool")
			return
		},
		MonitorHook: func(string, chan<- Value) {
			t.Error("Unexpected call to Provider.Monitor")
			return
		},
	}
}

func (f *FakeProvider) Reset() {
	f.GetCalls = []*ProviderGetInvocation{}
	f.GetIntCalls = []*ProviderGetIntInvocation{}
	f.GetBoolCalls = []*ProviderGetBoolInvocation{}
	f.MonitorCalls = []*ProviderMonitorInvocation{}
}

func (_f1 *FakeProvider) Get(ident1 string) (ident2 string, ident3 merry.Error) {
	if _f1.GetHook == nil {
		panic("Provider.Get() called but FakeProvider.GetHook is nil")
	}

	invocation := new(ProviderGetInvocation)
	_f1.GetCalls = append(_f1.GetCalls, invocation)

	invocation.Parameters.Ident1 = ident1

	ident2, ident3 = _f1.GetHook(ident1)

	invocation.Results.Ident2 = ident2
	invocation.Results.Ident3 = ident3

	return
}

// SetGetStub configures Provider.Get to always return the given values
func (_f2 *FakeProvider) SetGetStub(ident2 string, ident3 merry.Error) {
	_f2.GetHook = func(string) (string, merry.Error) {
		return ident2, ident3
	}
}

// SetGetInvocation configures Provider.Get to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (_f3 *FakeProvider) SetGetInvocation(calls_f4 []*ProviderGetInvocation, fallback_f5 func() (string, merry.Error)) {
	_f3.GetHook = func(ident1 string) (ident2 string, ident3 merry.Error) {
		for _, call := range calls_f4 {
			if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
				ident2 = call.Results.Ident2
				ident3 = call.Results.Ident3

				return
			}
		}

		return fallback_f5()
	}
}

// GetCalled returns true if FakeProvider.Get was called
func (f *FakeProvider) GetCalled() bool {
	return len(f.GetCalls) != 0
}

// AssertGetCalled calls t.Error if FakeProvider.Get was not called
func (f *FakeProvider) AssertGetCalled(t ProviderTestingT) {
	t.Helper()
	if len(f.GetCalls) == 0 {
		t.Error("FakeProvider.Get not called, expected at least one")
	}
}

// GetNotCalled returns true if FakeProvider.Get was not called
func (f *FakeProvider) GetNotCalled() bool {
	return len(f.GetCalls) == 0
}

// AssertGetNotCalled calls t.Error if FakeProvider.Get was called
func (f *FakeProvider) AssertGetNotCalled(t ProviderTestingT) {
	t.Helper()
	if len(f.GetCalls) != 0 {
		t.Error("FakeProvider.Get called, expected none")
	}
}

// GetCalledOnce returns true if FakeProvider.Get was called exactly once
func (f *FakeProvider) GetCalledOnce() bool {
	return len(f.GetCalls) == 1
}

// AssertGetCalledOnce calls t.Error if FakeProvider.Get was not called exactly once
func (f *FakeProvider) AssertGetCalledOnce(t ProviderTestingT) {
	t.Helper()
	if len(f.GetCalls) != 1 {
		t.Errorf("FakeProvider.Get called %d times, expected 1", len(f.GetCalls))
	}
}

// GetCalledN returns true if FakeProvider.Get was called at least n times
func (f *FakeProvider) GetCalledN(n int) bool {
	return len(f.GetCalls) >= n
}

// AssertGetCalledN calls t.Error if FakeProvider.Get was called less than n times
func (f *FakeProvider) AssertGetCalledN(t ProviderTestingT, n int) {
	t.Helper()
	if len(f.GetCalls) < n {
		t.Errorf("FakeProvider.Get called %d times, expected >= %d", len(f.GetCalls), n)
	}
}

// GetCalledWith returns true if FakeProvider.Get was called with the given values
func (_f6 *FakeProvider) GetCalledWith(ident1 string) (found bool) {
	for _, call := range _f6.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	return
}

// AssertGetCalledWith calls t.Error if FakeProvider.Get was not called with the given values
func (_f7 *FakeProvider) AssertGetCalledWith(t ProviderTestingT, ident1 string) {
	t.Helper()
	var found bool
	for _, call := range _f7.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeProvider.Get not called with expected parameters")
	}
}

// GetCalledOnceWith returns true if FakeProvider.Get was called exactly once with the given values
func (_f8 *FakeProvider) GetCalledOnceWith(ident1 string) bool {
	var count int
	for _, call := range _f8.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	return count == 1
}

// AssertGetCalledOnceWith calls t.Error if FakeProvider.Get was not called exactly once with the given values
func (_f9 *FakeProvider) AssertGetCalledOnceWith(t ProviderTestingT, ident1 string) {
	t.Helper()
	var count int
	for _, call := range _f9.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeProvider.Get called %d times with expected parameters, expected one", count)
	}
}

// GetResultsForCall returns the result values for the first call to FakeProvider.Get with the given values
func (_f10 *FakeProvider) GetResultsForCall(ident1 string) (ident2 string, ident3 merry.Error, found bool) {
	for _, call := range _f10.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			ident2 = call.Results.Ident2
			ident3 = call.Results.Ident3
			found = true
			break
		}
	}

	return
}

func (_f11 *FakeProvider) GetInt(ident1 string) (ident2 int, ident3 merry.Error) {
	if _f11.GetIntHook == nil {
		panic("Provider.GetInt() called but FakeProvider.GetIntHook is nil")
	}

	invocation := new(ProviderGetIntInvocation)
	_f11.GetIntCalls = append(_f11.GetIntCalls, invocation)

	invocation.Parameters.Ident1 = ident1

	ident2, ident3 = _f11.GetIntHook(ident1)

	invocation.Results.Ident2 = ident2
	invocation.Results.Ident3 = ident3

	return
}

// SetGetIntStub configures Provider.GetInt to always return the given values
func (_f12 *FakeProvider) SetGetIntStub(ident2 int, ident3 merry.Error) {
	_f12.GetIntHook = func(string) (int, merry.Error) {
		return ident2, ident3
	}
}

// SetGetIntInvocation configures Provider.GetInt to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (_f13 *FakeProvider) SetGetIntInvocation(calls_f14 []*ProviderGetIntInvocation, fallback_f15 func() (int, merry.Error)) {
	_f13.GetIntHook = func(ident1 string) (ident2 int, ident3 merry.Error) {
		for _, call := range calls_f14 {
			if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
				ident2 = call.Results.Ident2
				ident3 = call.Results.Ident3

				return
			}
		}

		return fallback_f15()
	}
}

// GetIntCalled returns true if FakeProvider.GetInt was called
func (f *FakeProvider) GetIntCalled() bool {
	return len(f.GetIntCalls) != 0
}

// AssertGetIntCalled calls t.Error if FakeProvider.GetInt was not called
func (f *FakeProvider) AssertGetIntCalled(t ProviderTestingT) {
	t.Helper()
	if len(f.GetIntCalls) == 0 {
		t.Error("FakeProvider.GetInt not called, expected at least one")
	}
}

// GetIntNotCalled returns true if FakeProvider.GetInt was not called
func (f *FakeProvider) GetIntNotCalled() bool {
	return len(f.GetIntCalls) == 0
}

// AssertGetIntNotCalled calls t.Error if FakeProvider.GetInt was called
func (f *FakeProvider) AssertGetIntNotCalled(t ProviderTestingT) {
	t.Helper()
	if len(f.GetIntCalls) != 0 {
		t.Error("FakeProvider.GetInt called, expected none")
	}
}

// GetIntCalledOnce returns true if FakeProvider.GetInt was called exactly once
func (f *FakeProvider) GetIntCalledOnce() bool {
	return len(f.GetIntCalls) == 1
}

// AssertGetIntCalledOnce calls t.Error if FakeProvider.GetInt was not called exactly once
func (f *FakeProvider) AssertGetIntCalledOnce(t ProviderTestingT) {
	t.Helper()
	if len(f.GetIntCalls) != 1 {
		t.Errorf("FakeProvider.GetInt called %d times, expected 1", len(f.GetIntCalls))
	}
}

// GetIntCalledN returns true if FakeProvider.GetInt was called at least n times
func (f *FakeProvider) GetIntCalledN(n int) bool {
	return len(f.GetIntCalls) >= n
}

// AssertGetIntCalledN calls t.Error if FakeProvider.GetInt was called less than n times
func (f *FakeProvider) AssertGetIntCalledN(t ProviderTestingT, n int) {
	t.Helper()
	if len(f.GetIntCalls) < n {
		t.Errorf("FakeProvider.GetInt called %d times, expected >= %d", len(f.GetIntCalls), n)
	}
}

// GetIntCalledWith returns true if FakeProvider.GetInt was called with the given values
func (_f16 *FakeProvider) GetIntCalledWith(ident1 string) (found bool) {
	for _, call := range _f16.GetIntCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	return
}

// AssertGetIntCalledWith calls t.Error if FakeProvider.GetInt was not called with the given values
func (_f17 *FakeProvider) AssertGetIntCalledWith(t ProviderTestingT, ident1 string) {
	t.Helper()
	var found bool
	for _, call := range _f17.GetIntCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeProvider.GetInt not called with expected parameters")
	}
}

// GetIntCalledOnceWith returns true if FakeProvider.GetInt was called exactly once with the given values
func (_f18 *FakeProvider) GetIntCalledOnceWith(ident1 string) bool {
	var count int
	for _, call := range _f18.GetIntCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	return count == 1
}

// AssertGetIntCalledOnceWith calls t.Error if FakeProvider.GetInt was not called exactly once with the given values
func (_f19 *FakeProvider) AssertGetIntCalledOnceWith(t ProviderTestingT, ident1 string) {
	t.Helper()
	var count int
	for _, call := range _f19.GetIntCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeProvider.GetInt called %d times with expected parameters, expected one", count)
	}
}

// GetIntResultsForCall returns the result values for the first call to FakeProvider.GetInt with the given values
func (_f20 *FakeProvider) GetIntResultsForCall(ident1 string) (ident2 int, ident3 merry.Error, found bool) {
	for _, call := range _f20.GetIntCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			ident2 = call.Results.Ident2
			ident3 = call.Results.Ident3
			found = true
			break
		}
	}

	return
}

func (_f21 *FakeProvider) GetBool(ident1 string) (ident2 bool, ident3 merry.Error) {
	if _f21.GetBoolHook == nil {
		panic("Provider.GetBool() called but FakeProvider.GetBoolHook is nil")
	}

	invocation := new(ProviderGetBoolInvocation)
	_f21.GetBoolCalls = append(_f21.GetBoolCalls, invocation)

	invocation.Parameters.Ident1 = ident1

	ident2, ident3 = _f21.GetBoolHook(ident1)

	invocation.Results.Ident2 = ident2
	invocation.Results.Ident3 = ident3

	return
}

// SetGetBoolStub configures Provider.GetBool to always return the given values
func (_f22 *FakeProvider) SetGetBoolStub(ident2 bool, ident3 merry.Error) {
	_f22.GetBoolHook = func(string) (bool, merry.Error) {
		return ident2, ident3
	}
}

// SetGetBoolInvocation configures Provider.GetBool to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (_f23 *FakeProvider) SetGetBoolInvocation(calls_f24 []*ProviderGetBoolInvocation, fallback_f25 func() (bool, merry.Error)) {
	_f23.GetBoolHook = func(ident1 string) (ident2 bool, ident3 merry.Error) {
		for _, call := range calls_f24 {
			if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
				ident2 = call.Results.Ident2
				ident3 = call.Results.Ident3

				return
			}
		}

		return fallback_f25()
	}
}

// GetBoolCalled returns true if FakeProvider.GetBool was called
func (f *FakeProvider) GetBoolCalled() bool {
	return len(f.GetBoolCalls) != 0
}

// AssertGetBoolCalled calls t.Error if FakeProvider.GetBool was not called
func (f *FakeProvider) AssertGetBoolCalled(t ProviderTestingT) {
	t.Helper()
	if len(f.GetBoolCalls) == 0 {
		t.Error("FakeProvider.GetBool not called, expected at least one")
	}
}

// GetBoolNotCalled returns true if FakeProvider.GetBool was not called
func (f *FakeProvider) GetBoolNotCalled() bool {
	return len(f.GetBoolCalls) == 0
}

// AssertGetBoolNotCalled calls t.Error if FakeProvider.GetBool was called
func (f *FakeProvider) AssertGetBoolNotCalled(t ProviderTestingT) {
	t.Helper()
	if len(f.GetBoolCalls) != 0 {
		t.Error("FakeProvider.GetBool called, expected none")
	}
}

// GetBoolCalledOnce returns true if FakeProvider.GetBool was called exactly once
func (f *FakeProvider) GetBoolCalledOnce() bool {
	return len(f.GetBoolCalls) == 1
}

// AssertGetBoolCalledOnce calls t.Error if FakeProvider.GetBool was not called exactly once
func (f *FakeProvider) AssertGetBoolCalledOnce(t ProviderTestingT) {
	t.Helper()
	if len(f.GetBoolCalls) != 1 {
		t.Errorf("FakeProvider.GetBool called %d times, expected 1", len(f.GetBoolCalls))
	}
}

// GetBoolCalledN returns true if FakeProvider.GetBool was called at least n times
func (f *FakeProvider) GetBoolCalledN(n int) bool {
	return len(f.GetBoolCalls) >= n
}

// AssertGetBoolCalledN calls t.Error if FakeProvider.GetBool was called less than n times
func (f *FakeProvider) AssertGetBoolCalledN(t ProviderTestingT, n int) {
	t.Helper()
	if len(f.GetBoolCalls) < n {
		t.Errorf("FakeProvider.GetBool called %d times, expected >= %d", len(f.GetBoolCalls), n)
	}
}

// GetBoolCalledWith returns true if FakeProvider.GetBool was called with the given values
func (_f26 *FakeProvider) GetBoolCalledWith(ident1 string) (found bool) {
	for _, call := range _f26.GetBoolCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	return
}

// AssertGetBoolCalledWith calls t.Error if FakeProvider.GetBool was not called with the given values
func (_f27 *FakeProvider) AssertGetBoolCalledWith(t ProviderTestingT, ident1 string) {
	t.Helper()
	var found bool
	for _, call := range _f27.GetBoolCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeProvider.GetBool not called with expected parameters")
	}
}

// GetBoolCalledOnceWith returns true if FakeProvider.GetBool was called exactly once with the given values
func (_f28 *FakeProvider) GetBoolCalledOnceWith(ident1 string) bool {
	var count int
	for _, call := range _f28.GetBoolCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	return count == 1
}

// AssertGetBoolCalledOnceWith calls t.Error if FakeProvider.GetBool was not called exactly once with the given values
func (_f29 *FakeProvider) AssertGetBoolCalledOnceWith(t ProviderTestingT, ident1 string) {
	t.Helper()
	var count int
	for _, call := range _f29.GetBoolCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeProvider.GetBool called %d times with expected parameters, expected one", count)
	}
}

// GetBoolResultsForCall returns the result values for the first call to FakeProvider.GetBool with the given values
func (_f30 *FakeProvider) GetBoolResultsForCall(ident1 string) (ident2 bool, ident3 merry.Error, found bool) {
	for _, call := range _f30.GetBoolCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) {
			ident2 = call.Results.Ident2
			ident3 = call.Results.Ident3
			found = true
			break
		}
	}

	return
}

func (_f31 *FakeProvider) Monitor(ident1 string, ident2 chan<- Value) {
	if _f31.MonitorHook == nil {
		panic("Provider.Monitor() called but FakeProvider.MonitorHook is nil")
	}

	invocation := new(ProviderMonitorInvocation)
	_f31.MonitorCalls = append(_f31.MonitorCalls, invocation)

	invocation.Parameters.Ident1 = ident1
	invocation.Parameters.Ident2 = ident2

	_f31.MonitorHook(ident1, ident2)

	return
}

// MonitorCalled returns true if FakeProvider.Monitor was called
func (f *FakeProvider) MonitorCalled() bool {
	return len(f.MonitorCalls) != 0
}

// AssertMonitorCalled calls t.Error if FakeProvider.Monitor was not called
func (f *FakeProvider) AssertMonitorCalled(t ProviderTestingT) {
	t.Helper()
	if len(f.MonitorCalls) == 0 {
		t.Error("FakeProvider.Monitor not called, expected at least one")
	}
}

// MonitorNotCalled returns true if FakeProvider.Monitor was not called
func (f *FakeProvider) MonitorNotCalled() bool {
	return len(f.MonitorCalls) == 0
}

// AssertMonitorNotCalled calls t.Error if FakeProvider.Monitor was called
func (f *FakeProvider) AssertMonitorNotCalled(t ProviderTestingT) {
	t.Helper()
	if len(f.MonitorCalls) != 0 {
		t.Error("FakeProvider.Monitor called, expected none")
	}
}

// MonitorCalledOnce returns true if FakeProvider.Monitor was called exactly once
func (f *FakeProvider) MonitorCalledOnce() bool {
	return len(f.MonitorCalls) == 1
}

// AssertMonitorCalledOnce calls t.Error if FakeProvider.Monitor was not called exactly once
func (f *FakeProvider) AssertMonitorCalledOnce(t ProviderTestingT) {
	t.Helper()
	if len(f.MonitorCalls) != 1 {
		t.Errorf("FakeProvider.Monitor called %d times, expected 1", len(f.MonitorCalls))
	}
}

// MonitorCalledN returns true if FakeProvider.Monitor was called at least n times
func (f *FakeProvider) MonitorCalledN(n int) bool {
	return len(f.MonitorCalls) >= n
}

// AssertMonitorCalledN calls t.Error if FakeProvider.Monitor was called less than n times
func (f *FakeProvider) AssertMonitorCalledN(t ProviderTestingT, n int) {
	t.Helper()
	if len(f.MonitorCalls) < n {
		t.Errorf("FakeProvider.Monitor called %d times, expected >= %d", len(f.MonitorCalls), n)
	}
}

// MonitorCalledWith returns true if FakeProvider.Monitor was called with the given values
func (_f32 *FakeProvider) MonitorCalledWith(ident1 string, ident2 chan<- Value) (found bool) {
	for _, call := range _f32.MonitorCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	return
}

// AssertMonitorCalledWith calls t.Error if FakeProvider.Monitor was not called with the given values
func (_f33 *FakeProvider) AssertMonitorCalledWith(t ProviderTestingT, ident1 string, ident2 chan<- Value) {
	t.Helper()
	var found bool
	for _, call := range _f33.MonitorCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakeProvider.Monitor not called with expected parameters")
	}
}

// MonitorCalledOnceWith returns true if FakeProvider.Monitor was called exactly once with the given values
func (_f34 *FakeProvider) MonitorCalledOnceWith(ident1 string, ident2 chan<- Value) bool {
	var count int
	for _, call := range _f34.MonitorCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	return count == 1
}

// AssertMonitorCalledOnceWith calls t.Error if FakeProvider.Monitor was not called exactly once with the given values
func (_f35 *FakeProvider) AssertMonitorCalledOnceWith(t ProviderTestingT, ident1 string, ident2 chan<- Value) {
	t.Helper()
	var count int
	for _, call := range _f35.MonitorCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakeProvider.Monitor called %d times with expected parameters, expected one", count)
	}
}
