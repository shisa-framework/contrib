// generated by "charlatan -output=./consulkvgetter_charlatan.go kvGetter".  DO NOT EDIT.

package env

import "reflect"

import consul "github.com/hashicorp/consul/api"

// kvGetterGetInvocation represents a single call of FakekvGetter.Get
type kvGetterGetInvocation struct {
	Parameters struct {
		Ident1 string
		Ident2 *consul.QueryOptions
	}
	Results struct {
		Ident3 *consul.KVPair
		Ident4 *consul.QueryMeta
		Ident5 error
	}
}

// NewkvGetterGetInvocation creates a new instance of kvGetterGetInvocation
func NewkvGetterGetInvocation(ident1 string, ident2 *consul.QueryOptions, ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) *kvGetterGetInvocation {
	invocation := new(kvGetterGetInvocation)

	invocation.Parameters.Ident1 = ident1
	invocation.Parameters.Ident2 = ident2

	invocation.Results.Ident3 = ident3
	invocation.Results.Ident4 = ident4
	invocation.Results.Ident5 = ident5

	return invocation
}

// kvGetterListInvocation represents a single call of FakekvGetter.List
type kvGetterListInvocation struct {
	Parameters struct {
		Ident1 string
		Ident2 *consul.QueryOptions
	}
	Results struct {
		Ident3 consul.KVPairs
		Ident4 *consul.QueryMeta
		Ident5 error
	}
}

// NewkvGetterListInvocation creates a new instance of kvGetterListInvocation
func NewkvGetterListInvocation(ident1 string, ident2 *consul.QueryOptions, ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) *kvGetterListInvocation {
	invocation := new(kvGetterListInvocation)

	invocation.Parameters.Ident1 = ident1
	invocation.Parameters.Ident2 = ident2

	invocation.Results.Ident3 = ident3
	invocation.Results.Ident4 = ident4
	invocation.Results.Ident5 = ident5

	return invocation
}

// kvGetterTestingT represents the methods of "testing".T used by charlatan Fakes.  It avoids importing the testing package.
type kvGetterTestingT interface {
	Error(...interface{})
	Errorf(string, ...interface{})
	Fatal(...interface{})
	Helper()
}

/*
FakekvGetter is a mock implementation of kvGetter for testing.
Use it in your tests as in this example:

	package example

	func TestWithkvGetter(t *testing.T) {
		f := &env.FakekvGetter{
			GetHook: func(ident1 string, ident2 *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
				// ensure parameters meet expections, signal errors using t, etc
				return
			},
		}

		// test code goes here ...

		// assert state of FakeGet ...
		f.AssertGetCalledOnce(t)
	}

Create anonymous function implementations for only those interface methods that
should be called in the code under test.  This will force a panic if any
unexpected calls are made to FakeGet.
*/
type FakekvGetter struct {
	GetHook  func(string, *consul.QueryOptions) (*consul.KVPair, *consul.QueryMeta, error)
	ListHook func(string, *consul.QueryOptions) (consul.KVPairs, *consul.QueryMeta, error)

	GetCalls  []*kvGetterGetInvocation
	ListCalls []*kvGetterListInvocation
}

// NewFakekvGetterDefaultPanic returns an instance of FakekvGetter with all hooks configured to panic
func NewFakekvGetterDefaultPanic() *FakekvGetter {
	return &FakekvGetter{
		GetHook: func(string, *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
			panic("Unexpected call to kvGetter.Get")
		},
		ListHook: func(string, *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) {
			panic("Unexpected call to kvGetter.List")
		},
	}
}

// NewFakekvGetterDefaultFatal returns an instance of FakekvGetter with all hooks configured to call t.Fatal
func NewFakekvGetterDefaultFatal(t kvGetterTestingT) *FakekvGetter {
	return &FakekvGetter{
		GetHook: func(string, *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
			t.Fatal("Unexpected call to kvGetter.Get")
			return
		},
		ListHook: func(string, *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) {
			t.Fatal("Unexpected call to kvGetter.List")
			return
		},
	}
}

// NewFakekvGetterDefaultError returns an instance of FakekvGetter with all hooks configured to call t.Error
func NewFakekvGetterDefaultError(t kvGetterTestingT) *FakekvGetter {
	return &FakekvGetter{
		GetHook: func(string, *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
			t.Error("Unexpected call to kvGetter.Get")
			return
		},
		ListHook: func(string, *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) {
			t.Error("Unexpected call to kvGetter.List")
			return
		},
	}
}

func (f *FakekvGetter) Reset() {
	f.GetCalls = []*kvGetterGetInvocation{}
	f.ListCalls = []*kvGetterListInvocation{}
}

func (_f1 *FakekvGetter) Get(ident1 string, ident2 *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
	if _f1.GetHook == nil {
		panic("kvGetter.Get() called but FakekvGetter.GetHook is nil")
	}

	invocation := new(kvGetterGetInvocation)
	_f1.GetCalls = append(_f1.GetCalls, invocation)

	invocation.Parameters.Ident1 = ident1
	invocation.Parameters.Ident2 = ident2

	ident3, ident4, ident5 = _f1.GetHook(ident1, ident2)

	invocation.Results.Ident3 = ident3
	invocation.Results.Ident4 = ident4
	invocation.Results.Ident5 = ident5

	return
}

// SetGetStub configures kvGetter.Get to always return the given values
func (_f2 *FakekvGetter) SetGetStub(ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
	_f2.GetHook = func(string, *consul.QueryOptions) (*consul.KVPair, *consul.QueryMeta, error) {
		return ident3, ident4, ident5
	}
}

// SetGetInvocation configures kvGetter.Get to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (_f3 *FakekvGetter) SetGetInvocation(calls_f4 []*kvGetterGetInvocation, fallback_f5 func() (*consul.KVPair, *consul.QueryMeta, error)) {
	_f3.GetHook = func(ident1 string, ident2 *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error) {
		for _, call := range calls_f4 {
			if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
				ident3 = call.Results.Ident3
				ident4 = call.Results.Ident4
				ident5 = call.Results.Ident5

				return
			}
		}

		return fallback_f5()
	}
}

// GetCalled returns true if FakekvGetter.Get was called
func (f *FakekvGetter) GetCalled() bool {
	return len(f.GetCalls) != 0
}

// AssertGetCalled calls t.Error if FakekvGetter.Get was not called
func (f *FakekvGetter) AssertGetCalled(t kvGetterTestingT) {
	t.Helper()
	if len(f.GetCalls) == 0 {
		t.Error("FakekvGetter.Get not called, expected at least one")
	}
}

// GetNotCalled returns true if FakekvGetter.Get was not called
func (f *FakekvGetter) GetNotCalled() bool {
	return len(f.GetCalls) == 0
}

// AssertGetNotCalled calls t.Error if FakekvGetter.Get was called
func (f *FakekvGetter) AssertGetNotCalled(t kvGetterTestingT) {
	t.Helper()
	if len(f.GetCalls) != 0 {
		t.Error("FakekvGetter.Get called, expected none")
	}
}

// GetCalledOnce returns true if FakekvGetter.Get was called exactly once
func (f *FakekvGetter) GetCalledOnce() bool {
	return len(f.GetCalls) == 1
}

// AssertGetCalledOnce calls t.Error if FakekvGetter.Get was not called exactly once
func (f *FakekvGetter) AssertGetCalledOnce(t kvGetterTestingT) {
	t.Helper()
	if len(f.GetCalls) != 1 {
		t.Errorf("FakekvGetter.Get called %d times, expected 1", len(f.GetCalls))
	}
}

// GetCalledN returns true if FakekvGetter.Get was called at least n times
func (f *FakekvGetter) GetCalledN(n int) bool {
	return len(f.GetCalls) >= n
}

// AssertGetCalledN calls t.Error if FakekvGetter.Get was called less than n times
func (f *FakekvGetter) AssertGetCalledN(t kvGetterTestingT, n int) {
	t.Helper()
	if len(f.GetCalls) < n {
		t.Errorf("FakekvGetter.Get called %d times, expected >= %d", len(f.GetCalls), n)
	}
}

// GetCalledWith returns true if FakekvGetter.Get was called with the given values
func (_f6 *FakekvGetter) GetCalledWith(ident1 string, ident2 *consul.QueryOptions) (found bool) {
	for _, call := range _f6.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	return
}

// AssertGetCalledWith calls t.Error if FakekvGetter.Get was not called with the given values
func (_f7 *FakekvGetter) AssertGetCalledWith(t kvGetterTestingT, ident1 string, ident2 *consul.QueryOptions) {
	t.Helper()
	var found bool
	for _, call := range _f7.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakekvGetter.Get not called with expected parameters")
	}
}

// GetCalledOnceWith returns true if FakekvGetter.Get was called exactly once with the given values
func (_f8 *FakekvGetter) GetCalledOnceWith(ident1 string, ident2 *consul.QueryOptions) bool {
	var count int
	for _, call := range _f8.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	return count == 1
}

// AssertGetCalledOnceWith calls t.Error if FakekvGetter.Get was not called exactly once with the given values
func (_f9 *FakekvGetter) AssertGetCalledOnceWith(t kvGetterTestingT, ident1 string, ident2 *consul.QueryOptions) {
	t.Helper()
	var count int
	for _, call := range _f9.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakekvGetter.Get called %d times with expected parameters, expected one", count)
	}
}

// GetResultsForCall returns the result values for the first call to FakekvGetter.Get with the given values
func (_f10 *FakekvGetter) GetResultsForCall(ident1 string, ident2 *consul.QueryOptions) (ident3 *consul.KVPair, ident4 *consul.QueryMeta, ident5 error, found bool) {
	for _, call := range _f10.GetCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			ident3 = call.Results.Ident3
			ident4 = call.Results.Ident4
			ident5 = call.Results.Ident5
			found = true
			break
		}
	}

	return
}

func (_f11 *FakekvGetter) List(ident1 string, ident2 *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) {
	if _f11.ListHook == nil {
		panic("kvGetter.List() called but FakekvGetter.ListHook is nil")
	}

	invocation := new(kvGetterListInvocation)
	_f11.ListCalls = append(_f11.ListCalls, invocation)

	invocation.Parameters.Ident1 = ident1
	invocation.Parameters.Ident2 = ident2

	ident3, ident4, ident5 = _f11.ListHook(ident1, ident2)

	invocation.Results.Ident3 = ident3
	invocation.Results.Ident4 = ident4
	invocation.Results.Ident5 = ident5

	return
}

// SetListStub configures kvGetter.List to always return the given values
func (_f12 *FakekvGetter) SetListStub(ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) {
	_f12.ListHook = func(string, *consul.QueryOptions) (consul.KVPairs, *consul.QueryMeta, error) {
		return ident3, ident4, ident5
	}
}

// SetListInvocation configures kvGetter.List to return the given results when called with the given parameters
// If no match is found for an invocation the result(s) of the fallback function are returned
func (_f13 *FakekvGetter) SetListInvocation(calls_f14 []*kvGetterListInvocation, fallback_f15 func() (consul.KVPairs, *consul.QueryMeta, error)) {
	_f13.ListHook = func(ident1 string, ident2 *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error) {
		for _, call := range calls_f14 {
			if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
				ident3 = call.Results.Ident3
				ident4 = call.Results.Ident4
				ident5 = call.Results.Ident5

				return
			}
		}

		return fallback_f15()
	}
}

// ListCalled returns true if FakekvGetter.List was called
func (f *FakekvGetter) ListCalled() bool {
	return len(f.ListCalls) != 0
}

// AssertListCalled calls t.Error if FakekvGetter.List was not called
func (f *FakekvGetter) AssertListCalled(t kvGetterTestingT) {
	t.Helper()
	if len(f.ListCalls) == 0 {
		t.Error("FakekvGetter.List not called, expected at least one")
	}
}

// ListNotCalled returns true if FakekvGetter.List was not called
func (f *FakekvGetter) ListNotCalled() bool {
	return len(f.ListCalls) == 0
}

// AssertListNotCalled calls t.Error if FakekvGetter.List was called
func (f *FakekvGetter) AssertListNotCalled(t kvGetterTestingT) {
	t.Helper()
	if len(f.ListCalls) != 0 {
		t.Error("FakekvGetter.List called, expected none")
	}
}

// ListCalledOnce returns true if FakekvGetter.List was called exactly once
func (f *FakekvGetter) ListCalledOnce() bool {
	return len(f.ListCalls) == 1
}

// AssertListCalledOnce calls t.Error if FakekvGetter.List was not called exactly once
func (f *FakekvGetter) AssertListCalledOnce(t kvGetterTestingT) {
	t.Helper()
	if len(f.ListCalls) != 1 {
		t.Errorf("FakekvGetter.List called %d times, expected 1", len(f.ListCalls))
	}
}

// ListCalledN returns true if FakekvGetter.List was called at least n times
func (f *FakekvGetter) ListCalledN(n int) bool {
	return len(f.ListCalls) >= n
}

// AssertListCalledN calls t.Error if FakekvGetter.List was called less than n times
func (f *FakekvGetter) AssertListCalledN(t kvGetterTestingT, n int) {
	t.Helper()
	if len(f.ListCalls) < n {
		t.Errorf("FakekvGetter.List called %d times, expected >= %d", len(f.ListCalls), n)
	}
}

// ListCalledWith returns true if FakekvGetter.List was called with the given values
func (_f16 *FakekvGetter) ListCalledWith(ident1 string, ident2 *consul.QueryOptions) (found bool) {
	for _, call := range _f16.ListCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	return
}

// AssertListCalledWith calls t.Error if FakekvGetter.List was not called with the given values
func (_f17 *FakekvGetter) AssertListCalledWith(t kvGetterTestingT, ident1 string, ident2 *consul.QueryOptions) {
	t.Helper()
	var found bool
	for _, call := range _f17.ListCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			found = true
			break
		}
	}

	if !found {
		t.Error("FakekvGetter.List not called with expected parameters")
	}
}

// ListCalledOnceWith returns true if FakekvGetter.List was called exactly once with the given values
func (_f18 *FakekvGetter) ListCalledOnceWith(ident1 string, ident2 *consul.QueryOptions) bool {
	var count int
	for _, call := range _f18.ListCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	return count == 1
}

// AssertListCalledOnceWith calls t.Error if FakekvGetter.List was not called exactly once with the given values
func (_f19 *FakekvGetter) AssertListCalledOnceWith(t kvGetterTestingT, ident1 string, ident2 *consul.QueryOptions) {
	t.Helper()
	var count int
	for _, call := range _f19.ListCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			count++
		}
	}

	if count != 1 {
		t.Errorf("FakekvGetter.List called %d times with expected parameters, expected one", count)
	}
}

// ListResultsForCall returns the result values for the first call to FakekvGetter.List with the given values
func (_f20 *FakekvGetter) ListResultsForCall(ident1 string, ident2 *consul.QueryOptions) (ident3 consul.KVPairs, ident4 *consul.QueryMeta, ident5 error, found bool) {
	for _, call := range _f20.ListCalls {
		if reflect.DeepEqual(call.Parameters.Ident1, ident1) && reflect.DeepEqual(call.Parameters.Ident2, ident2) {
			ident3 = call.Results.Ident3
			ident4 = call.Results.Ident4
			ident5 = call.Results.Ident5
			found = true
			break
		}
	}

	return
}
